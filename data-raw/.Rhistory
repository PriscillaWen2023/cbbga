sidebarPanel(
textInput("team_name", "Enter Team Name:"),
actionButton("submit", "Submit")
),
mainPanel(
h3("Team Stats"),
tableOutput("team_stats_table"),
plotOutput("win_loss_pie"),
verbatimTextOutput("invalid_team_message"),
verbatimTextOutput("teams_name"),
#h4("All Teams in alphabetical order:"),
tableOutput("all_teams_table")
)
)
)
# Server
server <- function(input, output) {
observeEvent(input$submit, {
req(input$team_name)
# Check if team name is valid
if (!input$team_name %in% unique(c(data$Away_Team, data$Home_Team))) {
output$invalid_team_message <- renderPrint({
"Invalid team name. Please enter a valid team name!"
})
output$teams_name <- renderPrint({
"All Teams in alphabetical order:"
})
output$team_stats_table <- renderTable(NULL)
output$win_loss_pie <- renderPlot(NULL)
all_teams <- sort(unique(c(data$Away_Team, data$Home_Team)))
all_teams_data <- tibble(Team_Name = all_teams)
output$all_teams_table <- renderTable({
all_teams_data
})
} else {
# Get team stats
team_stats_data <- team_stats(data, input$team_name)
# Output table of team stats
output$team_stats_table <- renderTable({
team_stats_data
})
# Output pie chart for win/loss
output$win_loss_pie <- renderPlot({
pie(c(team_stats_data$Wins, team_stats_data$Losses),
labels = c(paste("Wins (", round(100*team_stats_data$Winning_Percentage, 1), "%)"),
paste("Losses (", round(100*(1-team_stats_data$Winning_Percentage), 1), "%)")),
col = c("skyblue", "#FF6666"))
title(main = "Win-Loss Distribution")
})
output$invalid_team_message <- renderPrint(NULL)
output$teams_name <- renderPrint(NULL)
output$all_teams_table <- renderTable(NULL)
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(cbbga)  # Load your cbbga package
# UI
ui <- fluidPage(
titlePanel("College Basketball Team Stats"),
sidebarLayout(
sidebarPanel(
textInput("team_name", "Enter Team Name:"),
actionButton("submit", "Submit")
),
mainPanel(
h3("Team Stats"),
tableOutput("team_stats_table"),
plotOutput("win_loss_pie"),
verbatimTextOutput("invalid_team_message"),
verbatimTextOutput("teams_name"),
#h4("All Teams in alphabetical order:"),
tableOutput("all_teams_table")
)
)
)
# Server
server <- function(input, output) {
observeEvent(input$submit, {
req(input$team_name)
# Check if team name is valid
if (!input$team_name %in% unique(c(cbbga_2023$Away_Team, cbbga_2023$Home_Team))) {
output$invalid_team_message <- renderPrint({
"Invalid team name. Please enter a valid team name!"
})
output$teams_name <- renderPrint({
"All Teams in alphabetical order:"
})
output$team_stats_table <- renderTable(NULL)
output$win_loss_pie <- renderPlot(NULL)
all_teams <- sort(unique(c(cbbga_2023$Away_Team, cbbga_2023$Home_Team)))
all_teams_data <- tibble(Team_Name = all_teams)
output$all_teams_table <- renderTable({
all_teams_data
})
} else {
# Get team stats using the team_stats function from your package
team_stats_data <- team_stats(cbbga_2023, input$team_name)
# Output table of team stats
output$team_stats_table <- renderTable({
team_stats_data
})
# Output pie chart for win/loss
output$win_loss_pie <- renderPlot({
pie(c(team_stats_data$Wins, team_stats_data$Losses),
labels = c(paste("Wins (", round(100*team_stats_data$Winning_Percentage, 1), "%)"),
paste("Losses (", round(100*(1-team_stats_data$Winning_Percentage), 1), "%)")),
col = c("skyblue", "#FF6666"))
title(main = "Win-Loss Distribution")
})
output$invalid_team_message <- renderPrint(NULL)
output$teams_name <- renderPrint(NULL)
output$all_teams_table <- renderTable(NULL)
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(cbbga)
data("cbbga_2023")
usethis::use_data()
setwd("/Users/priscillawen/Desktop/Math_3190/cbbga")
devtools::document()
devtools::install()
library(shiny)
library(cbbga)
cbbga_2023
data(cbbga_2023)
library(shiny)
library(cbbga)  # Load your cbbga package
# UI
ui <- fluidPage(
titlePanel("College Basketball Team Stats"),
sidebarLayout(
sidebarPanel(
textInput("team_name", "Enter Team Name:"),
actionButton("submit", "Submit")
),
mainPanel(
h3("Team Stats"),
tableOutput("team_stats_table"),
plotOutput("win_loss_pie"),
verbatimTextOutput("invalid_team_message"),
verbatimTextOutput("teams_name"),
#h4("All Teams in alphabetical order:"),
tableOutput("all_teams_table")
)
)
)
# Server
server <- function(input, output) {
observeEvent(input$submit, {
req(input$team_name)
# Check if team name is valid
if (!input$team_name %in% unique(c(cbbga_2023$Away_Team, cbbga_2023$Home_Team))) {
output$invalid_team_message <- renderPrint({
"Invalid team name. Please enter a valid team name!"
})
output$teams_name <- renderPrint({
"All Teams in alphabetical order:"
})
output$team_stats_table <- renderTable(NULL)
output$win_loss_pie <- renderPlot(NULL)
all_teams <- sort(unique(c(cbbga_2023$Away_Team, cbbga_2023$Home_Team)))
all_teams_data <- tibble(Team_Name = all_teams)
output$all_teams_table <- renderTable({
all_teams_data
})
} else {
# Get team stats using the team_stats function from your package
team_stats_data <- team_stats(cbbga_2023, input$team_name)
# Output table of team stats
output$team_stats_table <- renderTable({
team_stats_data
})
# Output pie chart for win/loss
output$win_loss_pie <- renderPlot({
pie(c(team_stats_data$Wins, team_stats_data$Losses),
labels = c(paste("Wins (", round(100*team_stats_data$Winning_Percentage, 1), "%)"),
paste("Losses (", round(100*(1-team_stats_data$Winning_Percentage), 1), "%)")),
col = c("skyblue", "#FF6666"))
title(main = "Win-Loss Distribution")
})
output$invalid_team_message <- renderPrint(NULL)
output$teams_name <- renderPrint(NULL)
output$all_teams_table <- renderTable(NULL)
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
?team_stats
library(devtools)
library(styler)
library(testthat)
devtools::document()
rm(list = c("team_stats"))
install.packages("roxygen2")
install.packages("roxygen2")
roxygen2::roxygenize()
library(devtools)
library(usethis)
setwd("/Users/priscillawen/Desktop/Math_3190/cbbga")
devtools::document()
devtools::install()
library(shiny)
library(cbbga)  # Load your cbbga package
# UI
ui <- fluidPage(
titlePanel("College Basketball Team Stats"),
sidebarLayout(
sidebarPanel(
textInput("team_name", "Enter Team Name:"),
actionButton("submit", "Submit")
),
mainPanel(
h3("Team Stats"),
tableOutput("team_stats_table"),
plotOutput("win_loss_pie"),
verbatimTextOutput("invalid_team_message"),
verbatimTextOutput("teams_name"),
#h4("All Teams in alphabetical order:"),
tableOutput("all_teams_table")
)
)
)
# Server
server <- function(input, output) {
observeEvent(input$submit, {
req(input$team_name)
# Check if team name is valid
if (!input$team_name %in% unique(c(cbbga_2023$Away_Team, cbbga_2023$Home_Team))) {
output$invalid_team_message <- renderPrint({
"Invalid team name. Please enter a valid team name!"
})
output$teams_name <- renderPrint({
"All Teams in alphabetical order:"
})
output$team_stats_table <- renderTable(NULL)
output$win_loss_pie <- renderPlot(NULL)
all_teams <- sort(unique(c(cbbga_2023$Away_Team, cbbga_2023$Home_Team)))
all_teams_data <- tibble(Team_Name = all_teams)
output$all_teams_table <- renderTable({
all_teams_data
})
} else {
# Get team stats using the team_stats function from your package
team_stats_data <- team_stats(cbbga_2023, input$team_name)
# Output table of team stats
output$team_stats_table <- renderTable({
team_stats_data
})
# Output pie chart for win/loss
output$win_loss_pie <- renderPlot({
pie(c(team_stats_data$Wins, team_stats_data$Losses),
labels = c(paste("Wins (", round(100*team_stats_data$Winning_Percentage, 1), "%)"),
paste("Losses (", round(100*(1-team_stats_data$Winning_Percentage), 1), "%)")),
col = c("skyblue", "#FF6666"))
title(main = "Win-Loss Distribution")
})
output$invalid_team_message <- renderPrint(NULL)
output$teams_name <- renderPrint(NULL)
output$all_teams_table <- renderTable(NULL)
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
data
cbbga_2023
usethis::use_data(cbbga_2023, overwrite = TRUE)
library(cbbga)
data("cbbga_2023")
# Save the dataset to the package
data(cbbga_2023)
# Save the dataset to the package
data(cbbga_2023)
# Read the CSV file containing the dataset
cbbga_2023 <- read.csv("/Users/priscillawen/Desktop/Math_3190/cbbga/data-raw/cbbga_2023.csv")
data(cbbga_2023)
setwd("/Users/priscillawen/Desktop/Math_3190/cbbga/data-raw")
cbbga_2023 <- read.csv("cbbga_2023.csv")
cbbga_2023
usethis::use_data(cbbga_2023, overwrite = TRUE)
cbbga_2023
cbbga_2023
devtools::document()
devtools::install()
library(cbbga)
data("cbbga_2023")
cbbga_2023
library(shiny)
library(cbbga)  # Load your cbbga package
# UI
ui <- fluidPage(
titlePanel("College Basketball Team Stats"),
sidebarLayout(
sidebarPanel(
textInput("team_name", "Enter Team Name:"),
actionButton("submit", "Submit")
),
mainPanel(
h3("Team Stats"),
tableOutput("team_stats_table"),
plotOutput("win_loss_pie"),
verbatimTextOutput("invalid_team_message"),
verbatimTextOutput("teams_name"),
#h4("All Teams in alphabetical order:"),
tableOutput("all_teams_table")
)
)
)
# Server
server <- function(input, output) {
observeEvent(input$submit, {
req(input$team_name)
# Check if team name is valid
if (!input$team_name %in% unique(c(cbbga_2023$Away_Team, cbbga_2023$Home_Team))) {
output$invalid_team_message <- renderPrint({
"Invalid team name. Please enter a valid team name!"
})
output$teams_name <- renderPrint({
"All Teams in alphabetical order:"
})
output$team_stats_table <- renderTable(NULL)
output$win_loss_pie <- renderPlot(NULL)
all_teams <- sort(unique(c(cbbga_2023$Away_Team, cbbga_2023$Home_Team)))
all_teams_data <- tibble(Team_Name = all_teams)
output$all_teams_table <- renderTable({
all_teams_data
})
} else {
# Get team stats using the team_stats function from your package
team_stats_data <- team_stats(cbbga_2023, input$team_name)
# Output table of team stats
output$team_stats_table <- renderTable({
team_stats_data
})
# Output pie chart for win/loss
output$win_loss_pie <- renderPlot({
pie(c(team_stats_data$Wins, team_stats_data$Losses),
labels = c(paste("Wins (", round(100*team_stats_data$Winning_Percentage, 1), "%)"),
paste("Losses (", round(100*(1-team_stats_data$Winning_Percentage), 1), "%)")),
col = c("skyblue", "#FF6666"))
title(main = "Win-Loss Distribution")
})
output$invalid_team_message <- renderPrint(NULL)
output$teams_name <- renderPrint(NULL)
output$all_teams_table <- renderTable(NULL)
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(cbbga)  # Load your cbbga package
# UI
ui <- fluidPage(
titlePanel("College Basketball Team Stats"),
sidebarLayout(
sidebarPanel(
textInput("team_name", "Enter Team Name:"),
actionButton("submit", "Submit")
),
mainPanel(
h3("Team Stats"),
tableOutput("team_stats_table"),
plotOutput("win_loss_pie"),
verbatimTextOutput("invalid_team_message"),
verbatimTextOutput("teams_name"),
#h4("All Teams in alphabetical order:"),
tableOutput("all_teams_table")
)
)
)
# Server
server <- function(input, output) {
observeEvent(input$submit, {
req(input$team_name)
# Check if team name is valid
if (!input$team_name %in% unique(c(cbbga_2023$Away_Team, cbbga_2023$Home_Team))) {
output$invalid_team_message <- renderPrint({
"Invalid team name. Please enter a valid team name!"
})
output$teams_name <- renderPrint({
"All Teams in alphabetical order:"
})
output$team_stats_table <- renderTable(NULL)
output$win_loss_pie <- renderPlot(NULL)
all_teams <- sort(unique(c(cbbga_2023$Away_Team, cbbga_2023$Home_Team)))
all_teams_data <- tibble(Team_Name = all_teams)
output$all_teams_table <- renderTable({
all_teams_data
})
} else {
# Get team stats using the team_stats function from your package
team_stats_data <- team_stats(cbbga_2023, input$team_name)
# Output table of team stats
output$team_stats_table <- renderTable({
team_stats_data
})
# Output pie chart for win/loss
output$win_loss_pie <- renderPlot({
pie(c(team_stats_data$Wins, team_stats_data$Losses),
labels = c(paste("Wins (", round(100*team_stats_data$Winning_Percentage, 1), "%)"),
paste("Losses (", round(100*(1-team_stats_data$Winning_Percentage), 1), "%)")),
col = c("skyblue", "#FF6666"))
title(main = "Win-Loss Distribution")
})
output$invalid_team_message <- renderPrint(NULL)
output$teams_name <- renderPrint(NULL)
output$all_teams_table <- renderTable(NULL)
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
library(cbbga)
# UI
ui <- fluidPage(
titlePanel("College Basketball Team Stats"),
sidebarLayout(
sidebarPanel(
textInput("team_name", "Enter Team Name:"),
actionButton("submit", "Submit")
),
mainPanel(
h3("Team Stats"),
tableOutput("team_stats_table"),
plotOutput("win_loss_pie"),
verbatimTextOutput("invalid_team_message"),
verbatimTextOutput("teams_name"),
#h4("All Teams in alphabetical order:"),
tableOutput("all_teams_table")
)
)
)
# Server
server <- function(input, output) {
observeEvent(input$submit, {
req(input$team_name)
# Check if team name is valid
if (!input$team_name %in% unique(c(cbbga_2023$Away_Team, cbbga_2023$Home_Team))) {
output$invalid_team_message <- renderPrint({
"Invalid team name. Please enter a valid team name!"
})
output$teams_name <- renderPrint({
"All Teams in alphabetical order:"
})
output$team_stats_table <- renderTable(NULL)
output$win_loss_pie <- renderPlot(NULL)
all_teams <- sort(unique(c(cbbga_2023$Away_Team, cbbga_2023$Home_Team)))
all_teams_data <- tibble(Team_Name = all_teams)
output$all_teams_table <- renderTable({
all_teams_data
})
} else {
# Get team stats using the team_stats function from your package
team_stats_data <- team_stats(cbbga_2023, input$team_name)
# Output table of team stats
output$team_stats_table <- renderTable({
team_stats_data
})
# Output pie chart for win/loss
output$win_loss_pie <- renderPlot({
pie(c(team_stats_data$Wins, team_stats_data$Losses),
labels = c(paste("Wins (", round(100*team_stats_data$Winning_Percentage, 1), "%)"),
paste("Losses (", round(100*(1-team_stats_data$Winning_Percentage), 1), "%)")),
col = c("skyblue", "#FF6666"))
title(main = "Win-Loss Distribution")
})
output$invalid_team_message <- renderPrint(NULL)
output$teams_name <- renderPrint(NULL)
output$all_teams_table <- renderTable(NULL)
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
output$invalid_team_message <- renderPrint(NULL)
devtools::install_github("inbo/inborutils")
#devtools::install_github("inbo/inborutils")
library(inborutils)
install.packages("RSQLite")
install.packages("RSQLite")
library(RSQLite)
#devtools::install_github("inbo/inborutils")
library(inborutils)
#install.packages("RSQLite")
library(RSQLite)
# Define file paths
flights_csv <- "/Users/priscillawen/Desktop/3190 fundamental of data science/Homework 2/flight data/flights.csv"
airports_csv <- "/Users/priscillawen/Desktop/3190 fundamental of data science/Homework 2/flight data/airports.csv"
airlines_csv <- "/Users/priscillawen/Desktop/3190 fundamental of data science/Homework 2/flight data/airlines.csv"
# Convert CSV files to SQLite
csv_to_sqlite(csv_file = flights_csv, sqlite_file = "flight_data.sqlite", table_name = "flights")
#devtools::install_github("inbo/inborutils")
library(inborutils)
#install.packages("RSQLite")
library(RSQLite)
# Define file paths
flights_csv <- "/Users/priscillawen/Documents/3190 fundamendal of data science/Homework 2/flight data/flights.csv"
airports_csv <- "/Users/priscillawen/Documents/3190 fundamendal of data science/Homework 2/flight data/airports.csv"
airlines_csv <- "/Users/priscillawen/Documents/3190 fundamendal of data science/Homework 2/flight data/airlines.csv"
# Convert CSV files to SQLite
csv_to_sqlite(csv_file = flights_csv, sqlite_file = "flight_data.sqlite", table_name = "flights")
csv_to_sqlite(csv_file = airports_csv, sqlite_file = "flight_data.sqlite", table_name = "airports")
csv_to_sqlite(csv_file = airlines_csv, sqlite_file = "flight_data.sqlite", table_name = "airlines")
