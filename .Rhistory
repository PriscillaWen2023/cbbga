selected=names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
# Main panel. put your output plot here
mainPanel(
plotOutput('plot1')
)
)
)
server <- function(input, output, session) {
output$plot1 <- renderPlot({
plot(iris[,c(input$xcol,input$ycol)],
col = kmeans(iris[,c(input$xcol,input$ycol)], input$clusters)$cluster)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Put a titlePanel here
titlePanel("k-means clustering"),
sidebarLayout(
# Sidebar. Put your inputs inside the sidebarPanel
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected=names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
# Main panel. put your output plot here
mainPanel(
plotOutput('plot1')
)
)
)
server <- function(input, output, session) {
output$plot1 <- renderPlot({
plot(iris[,c(input$xcol,input$ycol)],
col = kmeans(iris[,c(input$xcol,input$ycol)], input$clusters)$cluster)
points(kmeans(iris[,c(input$xcol,input$ycol)], input$clusters)$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Put a titlePanel here
titlePanel("k-means clustering"),
sidebarLayout(
# Sidebar. Put your inputs inside the sidebarPanel
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected=names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
# Main panel. put your output plot here
mainPanel(
plotOutput('plot1')
)
)
)
server <- function(input, output, session) {
clusters <- reactive({
kmeans(iris[,c(input$xcol,input$ycol)], input$clusters)
})
output$plot1 <- renderPlot({
plot(iris[,c(input$xcol,input$ycol)],
col = clusters()$cluster)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Put a titlePanel here
titlePanel("k-means clustering"),
sidebarLayout(
# Sidebar. Put your inputs inside the sidebarPanel
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected=names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
# Main panel. put your output plot here
mainPanel(
plotOutput('plot1')
)
)
)
server <- function(input, output, session) {
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
library(tidyverse)
library(shiny)
# Load the mtcars dataset and convert specified variables to factors
data(mtcars)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- as.factor(mtcars$am)
mtcars$gear <- as.factor(mtcars$gear)
mtcars$carb <- as.factor(mtcars$carb)
# Define UI
ui <- fluidPage(
# Title for the app
titlePanel("mtcars Data Visualization"),
# Input select box for variable selection
sidebarLayout(
sidebarPanel(
selectInput('var_select', 'Select Variable', choices = names(mtcars)),
selectInput('plot_type', 'Select Plot Type', choices = c('Histogram', 'Box Plot', 'Bar Plot'))
),
mainPanel(
# Output plot
plotOutput('plot1'),
# Output text message
textOutput('message')
)
)
)
# Define server
server <- function(input, output, session) {
# Reactive expression to store selected variable
var_selected <- reactive({
input$var_select
})
# Reactive expression to store selected plot type
plot_type_selected <- reactive({
input$plot_type
})
# Render text message based on variable and plot type
output$message <- renderText({
if (is.numeric(mtcars[[var_selected()]])) {
if (plot_type_selected() == 'Bar Plot') {
"Warning: Wrong plot type for a quantitative variable! Please choose Histogram or Box Plot."
} else {
""
}
} else {
if (plot_type_selected() %in% c('Histogram', 'Box Plot')) {
"Warning: Wrong plot type for a categorical variable! Please choose Bar Plot."
} else {
""
}
}
})
# Render plot based on variable and plot type
output$plot1 <- renderPlot({
gg <- ggplot(mtcars, aes(x = .data[[var_selected()]])) +
labs(
title = paste("Distribution of", var_selected()),
x = var_selected(),
y = "Frequency"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 18),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16)
)
if (plot_type_selected() == 'Histogram') {
gg <- gg + geom_histogram(fill = 'skyblue', color = 'black', bins = 30)
} else if (plot_type_selected() == 'Box Plot') {
gg <- gg + geom_boxplot(fill = 'lightgreen', color = 'black')
} else if (plot_type_selected() == 'Bar Plot') {
gg <- gg + geom_bar(aes(fill = .data[[var_selected()]]), color = 'black') +
scale_fill_brewer(palette = 'Set3')
}
print(gg)
})
}
# Run the app
shinyApp(ui = ui, server = server)
library(ggplot2)
# Define a function to compute win/loss record and winning percentage for a given team
team_stats <- function(data, team_name) {
# Filter games by the given team
team_games <- data %>%
filter(Away_Team == team_name | Home_Team == team_name)
# Calculate win/loss record and winning percentage
stats <- team_games %>%
mutate(outcome = case_when(
(Away_Team == team_name & Away_Score > Home_Score) ~ "Win",
(Home_Team == team_name & Home_Score > Away_Score) ~ "Win",
TRUE ~ "Loss"
)) %>%
summarize(
Team = team_name,
Wins = sum(outcome == "Win"),
Losses = sum(outcome == "Loss"),
Total_Games = Wins + Losses,
Winning_Percentage = Wins / Total_Games
)
return(stats)
}
# Get unique team names
unique_teams <- unique(c(cbbga_2023$Away_Team, cbbga_2023$Home_Team))
library(ggplot2)
# Function to create a ggplot histogram
ghist <- function(x, bins = 10) {
ggplot() +
geom_histogram(data = data.frame(x), aes(x = x), bins = bins, fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = "Histogram",
x = "Value",
y = "Frequency")
}
# Function to create a ggplot box plot
gbox <- function(data, x_var, y_var = NULL, orientation = "vertical") {
if (is.null(y_var)) {
# Single numeric vector provided, create a box plot
if (orientation == "vertical") {
ggplot(data, aes(x = 1, y = !!rlang::sym(x_var))) +
geom_boxplot(fill = "skyblue") +
labs(title = "Box Plot",
x = "",
y = x_var)
} else if (orientation == "horizontal") {
ggplot(data, aes(x = !!rlang::sym(x_var), y = 1)) +
geom_boxplot(fill = "skyblue") +
labs(title = "Box Plot",
x = x_var,
y = "")
} else {
stop("Invalid orientation. Please choose 'vertical' or 'horizontal'.")
}
} else {
# Numeric and categorical variables provided, create side-by-side box plots
if (orientation == "horizontal") {
ggplot(data, aes_string(x = x_var, y = y_var)) +
geom_boxplot(fill = "skyblue") +
labs(title = "Side-by-Side Box Plots",
x = x_var,
y = y_var)
} else if (orientation == "vertical") {
ggplot(data, aes_string(x = y_var, y = x_var)) +
geom_boxplot(fill = "skyblue") +
labs(title = "Side-by-Side Box Plots",
x = y_var,
y = x_var)
} else {
stop("Invalid orientation. Please choose 'vertical' or 'horizontal'.")
}
}
}
setwd("/Users/priscillawen/Desktop/Math_3190/myplots.pw")
# Update documentation
devtools::document()
# Install the package
devtools::install()
# Load necessary packages
library(tidyverse)
# Download data using read.fwf()
url <- "http://kenpom.com/cbbga24.txt"
data <- read.fwf(url, widths = c(10, 25, 3, 23, 3, 30), strip.white = TRUE, skip = 0)
# Convert to tibble
cbbga <- as_tibble(data)
# Display the first few rows of the tibble
head(cbbga)
# Print out the structure of the tibble
str(cbbga)
# Rename columns
cbbga <- cbbga %>%
rename(
Date = V1,
Away_Team = V2,
Away_Score = V3,
Home_Team = V4,
Home_Score = V5,
other = V6
)
# Display the first few rows of the tibble
head(cbbga)
library(dplyr)
# Create new column for score differences
cbbga <- cbbga %>%
mutate(Score_Difference = Away_Score - Home_Score)
# Display the first few rows of the tibble
head(cbbga)
# Arrange the data set by the home team
cbbga <- cbbga %>%
arrange(Home_Team)
# Display the first few rows of the tibble
head(cbbga)
# Select variables except the one containing irrelevant information
cbbga <- cbbga %>%
select(!other)
# Display the first few rows of the tibble
head(cbbga)
# Load necessary packages
library(tidyverse)
library(dplyr)
# Combine all parts a-e into one piping expression
cbbga <- read.fwf("http://kenpom.com/cbbga24.txt", widths = c(10, 25, 3, 23, 3, 30), strip.white = TRUE, skip = 0) %>%
as_tibble() %>%
rename(
Date = V1,
Away_Team = V2,
Away_Score = V3,
Home_Team = V4,
Home_Score = V5,
other = V6
) %>%
mutate(Score_Difference = Away_Score - Home_Score) %>%
arrange(Home_Team) %>%
select(!other)
# Display the first few rows of the processed data
head(cbbga)
# Filter the data to include only games played in 2023
cbbga_2023 <- cbbga %>%
filter(year(as.Date(Date, "%m/%d/%Y")) == 2023)
# Display the first few rows of the filtered data
head(cbbga_2023)
# Define function to filter games by a given team
games_by_team <- function(data, team_name) {
data %>%
filter(Away_Team == team_name | Home_Team == team_name)
}
# Demonstrate the function by displaying games played by SUU
suu_games <- games_by_team(cbbga_2023, "Southern Utah")
head(suu_games)
# Define function to calculate win/loss record and winning percentage for SUU
suu_stats <- function(data) {
data %>%
mutate(outcome = case_when(
(Away_Team == "Southern Utah" & Away_Score > Home_Score) ~ "Win",
(Home_Team == "Southern Utah" & Home_Score > Away_Score) ~ "Win",
TRUE ~ "Loss"
)) %>%
summarize(
Total_Games = n(),
Wins = sum(outcome == "Win"),
Losses = sum(outcome == "Loss"),
Winning_Percentage = Wins / Total_Games
)
}
# Calculate SUU's win/loss record and winning percentage for their 2023 games
suu_stats <- suu_stats(suu_games)
suu_stats
# Define a function to compute win/loss record and winning percentage for a given team
team_stats <- function(data, team_name) {
# Filter games by the given team
team_games <- data %>%
filter(Away_Team == team_name | Home_Team == team_name)
# Calculate win/loss record and winning percentage
stats <- team_games %>%
mutate(outcome = case_when(
(Away_Team == team_name & Away_Score > Home_Score) ~ "Win",
(Home_Team == team_name & Home_Score > Away_Score) ~ "Win",
TRUE ~ "Loss"
)) %>%
summarize(
Team = team_name,
Wins = sum(outcome == "Win"),
Losses = sum(outcome == "Loss"),
Total_Games = Wins + Losses,
Winning_Percentage = Wins / Total_Games
)
return(stats)
}
# setwd("/Users/priscillawen/Desktop/Math_3190/myplots.pw")
# Update documentation
# devtools::document()
# Install the package
# devtools::install()
# Get unique team names
unique_teams <- unique(c(cbbga_2023$Away_Team, cbbga_2023$Home_Team))
# Remove any NA values
unique_teams <- unique_teams[!is.na(unique_teams)]
# Calculate team stats for each team
team_stats_list <- lapply(unique_teams, function(team) team_stats(cbbga_2023, team))
# Combine the statistics for all teams into a tibble
team_stats_df <- bind_rows(team_stats_list)
# Arrange the tibble by winning percentage in descending order
team_stats_df <- team_stats_df %>%
arrange(desc(Winning_Percentage))
# Display the tibble
team_stats_df
library(ggplot2)
# Function 1: Histogram of Games for each team
total_games_histogram <- function(data) {
ggplot(data, aes(x = Total_Games)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Total Games Histogram for Each Team",
x = "Total Games",
y = "Frequency") +
theme_minimal()
}
# Function 2: stacked box plot for the 20 teams who played the most games
stacked_box_plot <- function(data) {
# Filter for top 20 teams based on winning percentage
top_20_teams <- head(arrange(data, desc(Total_Games)), 20)
# Create stacked bar plot
ggplot(top_20_teams, aes(x = reorder(Team, -Total_Games))) +
geom_bar(aes(y = Wins, fill = "Wins"), stat = "identity", position = "stack") +
geom_bar(aes(y = Losses, fill = "Losses"), stat = "identity", position = "stack") +
labs(title = "Stacked Box Plot for Top 20 Winning Percentage Teams",
x = "Team",
y = "Count",
fill = "Outcome") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
# Generate hitogram
total_games_histogram(team_stats_df)
# Generate stacked box plot
stacked_box_plot(team_stats_df)
library(devtools)
install.packages(c("devtools", "styler", "testthat"))
install.packages(c("devtools", "styler", "testthat"))
library(devtools)
library(styler)
library(testthat)
setwd("-/desktop/Math_3190/cbbga")
setwd("-/desktop/Math_3190/cbbga")
setwd("-/desktop/Math_3190/cbbga")
setwd("-/desktop/Math_3190")
setwd("~/desktop/Math_3190/cbbga")
devtools::create("cbbga")
setwd("~/desktop/Math_3190")
devtools::create("cbbga")
# Check if the data-raw directory exists, if not, create it
data_raw_dir <- "cbbga/data-raw"
if (!dir.exists(data_raw_dir)) {
dir.create(data_raw_dir, recursive = TRUE)
}
# Save the tibble as a .csv file in the data-raw directory
write.csv(cbbga_2023, file = file.path(data_raw_dir, "cbbga_2023.csv"), row.names = FALSE)
setwd("~/desktop/Math_3190/cbbga/R")
file_path <- "team_stats.R"
file.create(file_path)
file.edit(file_path)
file_path <- "total_games_histogram.R"
file.create(file_path)
file.edit(file_path)
file_path <- "stacked_box_plot.R"
ile.create(file_path)
file.create(file_path)
file.edit(file_path)
setwd("~/desktop/Math_3190/cbbga/R")
devtools::install()
libray(team_stats)
library(team_stats)
setwd("~/desktop/Math_3190/cbbga/R")
library(team_stats.R)
library(cbbga)
cbbga::team_stats(...)
setwd("~/desktop/Math_3190/cbbga")
devtools::install()
library(cbbga)
team_stats()
team_stats(cbbga_2023, "Southern Utah")
team_stats(cbbga_2023, "Southern Utah")
team_stats <- function(data, team_name) {
# Filter games by the given team
team_games <- data %>%
filter(Away_Team == team_name | Home_Team == team_name)
# Calculate win/loss record and winning percentage
stats <- team_games %>%
mutate(outcome = case_when(
(Away_Team == team_name & Away_Score > Home_Score) ~ "Win",
(Home_Team == team_name & Home_Score > Away_Score) ~ "Win",
TRUE ~ "Loss"
)) %>%
summarize(
Team = team_name,
Wins = sum(outcome == "Win"),
Losses = sum(outcome == "Loss"),
Total_Games = Wins + Losses,
Winning_Percentage = Wins / Total_Games
)
return(stats)
}
team_stats(cbbga_2023, "Southern Utah")
cbbga_2023
devtools::document()
?team_stats
setwd("~/desktop/Math_3190/cbbga/R")
devtools::document()
setwd("~/desktop/Math_3190/cbbga")
devtools::document()
View(gbox)
devtools::document()
rm(list = c("stacked_box_plot", "team_stats", "total_games_histogram"))
rm(list = c("stacked_box_plot", "team_stats", "total_games_histogram"))
devtools::document()
?team_stats
?total_games_histogram
?stacked_box_plot
team_stats(cbbga_2023, "Southern Utah")
stacked_box_plot(team_stats_df)
View(scree_plot)
usethis::use_vignette("my-vignette")
devtools::install(build_vignettes=TRUE)
usethis::use_vignette("cbbga-vignette")
devtools::install(build_vignettes=TRUE)
utils::browseVignettes("cbbga")
View(norm.test)
